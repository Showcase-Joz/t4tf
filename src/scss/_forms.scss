

/* Create placeholder mixin */

@mixin placeholder($color, $size:"") {
	&::-webkit-input-placeholder {
		color: $color;
		@if $size != "" {
			font-size: $size;
		}
	}
	&:-moz-placeholder {
		color: $color;
		@if $size != "" {
			font-size: $size;
		}
	}
	&::-moz-placeholder {
		color: $color;
		@if $size != "" {
			font-size: $size;
		}
	}
	&:-ms-input-placeholder {
		color: $color;
		@if $size != "" {
			font-size: $size;
		}
	}
}

/* form and element styling */

.simple-email-form {
	display: grid;
	grid-template-rows: minmax(min-content, 80%) 1fr;
	height: min-content;
	width: 100%;
	
	@media screen and (min-width: 600px) {
		grid-template-columns: minmax(min-content, 80%) 1fr;
	}

	.email-label {
		position: relative;
	}

	.email-label,
	.email-button {
		border-bottom-left-radius: $radius;
		border-top-left-radius: $radius;
		border-bottom-right-radius: $radius;
		border-top-right-radius: $radius;
		display: inherit;
		width: 100%;
	}

	.email-label > input[type="email"],
	.email-button > input[type="submit"] {
		border: $primary-color solid 1px;
		border-bottom-left-radius: $radius;
		border-top-left-radius: $radius;
		border-bottom-right-radius: $radius;
		border-top-right-radius: $radius;
		font-size: $font-large;
		line-height: 1;
		padding: $padding-small;
		
		@media screen and (min-width: 600px) {
			padding: $padding;
			width: inherit;
		}

		@media screen and (min-width: 900px) {
			padding: $padding-small;
		}
	}

	.email-label > input[type="email"] {
		appearance: none;
		background-color: rgba(255, 255, 255, $opacity);
		border-top-right-radius: inherit;
		border-top-left-radius: inherit;
		border-bottom-right-radius: 0;
		border-bottom-left-radius: 0;
		color: $primary-color;
		cursor: text;

		@include placeholder($primary-color, $font-large);
		transition: background-color 300ms ease-in;

		@media screen and (min-width:600px) {
			border-bottom-left-radius: inherit;
			border-top-left-radius: inherit;
			border-top-right-radius: 0;
		}
		
		&:hover,
		&:focus {
			background-color: white;
			transition: background-color 300ms ease-in;
			// z-index: 5;
		}
	}

	.email-button > input[type="submit"] {
		background-color: $primary-color;
		border-top-left-radius: 0;
		border-top-right-radius: 0;
		color: $secondary-color;
		cursor: pointer;
		transition: background-color 300ms ease-in;

		&:hover {
			background-color: $valid-color;
			border-color: $valid-color;
			transition: all 300ms ease-in;
		}
		
		@media screen and (min-width: 600px) {
			border-top-left-radius: 0;
			border-top-right-radius: inherit;
			border-bottom-right-radius: inherit;
			border-bottom-left-radius: 0;
		}
	}
}

// /* validation style and icon */
// .required {
// 	background-color: transparent;

// 	input {
// 		position: relative;
// 		z-index: initial;

// 		&:placeholder-shown {
// 			font-style: italic;
// 		}

// 		&:focus:valid {
// 			box-shadow: 0 0 5px 1px $valid-color;
// 			z-index: 5;
// 		}

// 		&:focus:invalid {
// 			box-shadow: 0 0 5px 1px $invalid-color;
// 			z-index: 5;
// 		}
// 	}

// 	span::after {
// 		font-size: xx-large;
// 		font-weight: 300;
// 		position: absolute;
// 		right: 5px;
// 		top: -10px;
// 		transform: translateY(50%);
// 		z-index: 10;
// 	}

// 	input:valid + span::after {
// 		color: lighten($valid-color, 5%);
// 		content: "\2713";
// 	}
// 	input:valid:focus + span::after {
// 		color: lighten($valid-color, 15%);
// 	}

// 	input:required:invalid + span::after {
// 		color: lighten($invalid-color, 5%);
// 		content: "\2717";
// 	}

// 	input:invalid:focus + span::after {
// 		color: lighten($invalid-color, 15%);
// 	}
	
// 	input:not(:focus):invalid + span::after {
// 		color: $primary-color;
// 		content: "\002A";
// 	}
// }





// main form



/* form and element styling */

form .form-wrapper {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
	grid-auto-rows: auto;
	grid-gap: $form-grid-gap;
	grid-auto-flow: dense;
	// max-width: 100vw;

	label:not(.label-gender) {
		border-radius: $radius;
		position: relative;

		input {
			appearance: none;
			background-color: rgba(255, 255, 255, 0.85);
			border: 1px solid $primary-color;
			border-radius: inherit;
			color: $primary-color;
			cursor: text;
			font-size: $font-size;
			@include placeholder($primary-color, $font-size);
			padding: $padding;
			transition: background-color 300ms ease-in;
			width: 100%;

			&:hover,
			&:focus {
				background-color: white;
				transition: background-color 300ms ease-in;
			}
		}
	}
	.label-name {
		// grid-column: auto / span 2;
		// width: min-content;
		// min-width: 200px;
		// max-width: 350px;
	}
	.label-email {
		// grid-column: auto / span 3;
		// width: min-content;
		// min-width: 300px;
		// max-width: 400px;
	}
	.label-age {
		// width: min-content;
		// min-width: 200px;
		// max-width: 250px;
		// grid-column: auto / span 1;
	}
	.label-county {
		// width: min-content;
		// min-width: 300px;
		// max-width: 400px;
		// grid-column: auto / span 2;
	}
	.label-mobile {
		// width: 100%;
		// min-width: 200px;
		// max-width: 280px;
		// grid-column: auto / span 2;
	}
	.radio-group {
		align-items: center;
		align-self: flex-start;
		display: grid;
		grid-column: auto / auto;
		column-gap: $form-grid-gap;
		grid-row: auto / auto;
		grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
		justify-items: start;
		justify-self: stretch;
		max-width: inherit;
		grid-template-rows: minmax(80px, 1fr);
    height: 100%;

		label {
			align-items: center;
			color: $primary-color;
			cursor: pointer;
			display: flex;
			font-size: inherit;
			justify-content: space-around;
			padding: 1rem;
			padding-right: 20px;
			position: relative;
			user-select: none;
			width: 100%;
			border-radius: 5px;
			border: 1px solid salmon;
			height: inherit;

			&::after {
				content: "";
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				border-radius: 5px;
				background-color: rgba(0, 0, 0, 0.15);
			}

			// hide (not remove) original radio button
			input {
				cursor: pointer;
				display: inline;
				height: 0;
				opacity: 0;
				position: absolute;
				width: 0;
			}

			&:hover input ~ .new-radio {
				background-color: lighten($primary-color, 20%);
			}
			
			& input:checked ~ .new-radio {
				background-color: $primary-color;
			}

			& input:checked ~ .new-radio::after {
				display: block;
			}
			
			// create new radio button as we want it
			span.new-radio {
				background-color: #eee;
				border-radius: 50%;
				height: 25px;
				left: 10px;
				position: relative;
				width: 25px;

				&::after {
					background: $secondary-color;
					border-radius: 50%;
					content: "";
					display: none;
					height: 11px;
					left: 7px;
					position: absolute;
					top: 7px;
					width: 11px;
				}
			}
		}
	}
}

/* validation style and icon */

.required {
	background-color: black;
	
	.radio-group & {
		background-color: rgba(255, 255, 255, 0.85);
		border-radius: $radius;
		
		&:hover,
		&:focus {
			background-color: white;
			transition: background-color 300ms ease-in;
		}

		&:hover::after {
			background-color: transparent;
			transition: background-color 300ms ease-in;
		}
	}

	input {
		position: relative;
		z-index: initial;

		&:focus:valid {
			box-shadow: 0 0 5px 1px $valid-color;
			z-index: 5;
		}

		&:focus:invalid {
			box-shadow: 0 0 5px 1px $invalid-color;
			z-index: 5;
		}
	}

	.span-comment {
		bottom: 5px;
		font-size: small;
		position: absolute;
		opacity: 0;
		right: 5px;

		&:hover {
			opacity: 0.55;
		}
	}

	.validate::after {
		font-size: xx-large;
		font-weight: 300;
		position: absolute;
		right: 5px;
		top: -10px;
		transform: translateY(50%);
		z-index: 10;
	}

	input:required + .validate:hover {
		cursor: alias;

		&:before {
			content: "required";
			@extend .span-comment;
		}
	}

	input:optional + .validate:hover {
		cursor: help;

		&:before {
			content: "optional";
			@extend .span-comment;
		}
	}
	// green tick when valid
	input:required:valid + .validate::after {
		color: lighten($valid-color, 5%);
		content: "\2713";
	}
	// large green (brighter) tick when valid and focused
	input:valid:focus + .validate::after {
		color: lighten($valid-color, 15%);
	}
	// small orange asterisk when invalid
	input:not(:focus):invalid + .validate::after {
		color: $primary-color;
		content: "\002A";
	}
	// large red (bright) cross when invalid and focused
	input:invalid:focus + .validate::after {
		color: lighten($invalid-color, 15%);
		content: "\2717";
	}
	// small orange plus/minus when optional
	input:not(:focus):optional + .validate::after {
		color: $primary-color;
		content: "\2213";
		font-size: small;
		top: 0px;
	}
	// large orange question mark when optional and focused
	input:focus:optional + .validate::after {
		color: $primary-color;
		content: "\003F";
		font-weight: 900;
	}
}
